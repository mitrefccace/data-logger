#!/usr/bin/env node
/**
 * Module dependencies.
 */
var https = require('https');
var fs = require('fs');
var nconf = require('nconf');

// Get the name of the config file from the command line (optional)
nconf.argv().env();
cfile = 'config.json';

// Validate the incoming JSON config file
try {
  var content = fs.readFileSync(cfile, 'utf8');
  var myjson = JSON.parse(content);
  console.log("Valid JSON config file.");
} catch (ex) {
  console.log("Error in " + cfile);
  console.log('Exiting...');
  console.log(ex);
  process.exit(1);
}

nconf.file({
  file: cfile
});

/**
 * Get port from environment and store in Express.
 */
var decode = require('./../utils/decode');
var app = require('../app');
var port = decode(nconf.get('port'));
app.set('port', port);

/**
 * Create HTTP server.
 */
console.log("Listening for HTTPS connections");
var credentials = {
  key: fs.readFileSync(decode(nconf.get('ssl:key'))),
  cert: readFileSync(decode(nconf.get('ssl:cert')))
};

var server = http.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  console.log("Listening on port: " + bind);
}
